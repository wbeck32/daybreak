angular.module("dayBreak").service("userService",["$http",function(e){this.username=null,this.userState="loggedOut",this.userRegister=!1;var o=this;window.localStorage.getItem("token")?(this.username=window.localStorage.getItem("user"),this.userState="loggedIn",console.log("found token and userState set to logged in")):console.log("No token-userState set to logged out"),this.registerValidUser=function(o,s,t,n){console.log(o+" is username at registerUser"),console.log(t+" is email at registerUser   "),e({method:"POST",url:"/api/registervaliduser",data:{username:o,password:s,email:t},headers:{"Content-Type":"application/json"}}).success(function(e,o,s,t){console.log("user created - data.username value is  "+e.username+" and status is "+o),console.log("name acceptable")}).error(function(e,o,s,t){console.log("no user created ")})},this.checkUsername=function(o,s){e({method:"POST",url:"/api/checkusername",data:{username:o},headers:{"Content-Type":"application/json"}}).success(function(e,o,s,t){}).error(function(e,o,s,t){})},this.checkEmail=function(o,s){e({method:"POST",url:"/api/checkemail",data:{email:o},headers:{"Content-Type":"application/json"}}).success(function(e,o,s,t){}).error(function(e,o,s,t){})},this.login=function(s,t,n){console.log("service login + cb "+n),e({method:"POST",url:"/session",data:{username:s,password:t},headers:{"Content-Type":"application/json"}}).success(function(e,s,t,a){console.log(e.token+" is token"),console.log(e.user+" is data.user"),e.token&&(window.localStorage.setItem("token",e.token),window.localStorage.setItem("user",e.user),o.username=e.user,o.userState="loggedIn",console.log("user state is "+o.userState),n())}).error(function(e,o,s,t){console.log("login unsuccessful")})},this.signOut=function(){console.log("service signOut"),window.localStorage.removeItem("token"),window.localStorage.removeItem("user"),this.username=null,this.userState="loggedOut",console.log("user state is "+o.userState)},this.passwordChange=function(e,o){console.log("service logIn")},this.resetPassword=function(e){},this.deleteAccount=function(e){},this.passwordChange=function(o,s){e({method:"POST",url:"/api/passwordchange",data:{password:o,newpassword:s,username:this.username,access_token:window.localStorage.getItem("token")},headers:{"Content-Type":"application/json"}}).success(function(e,o,s,t){alert("1"===e?"Password Changed!":"Sorry, there was an error processing your request")}).error(function(e,o,s,t){console.log("password change error")})},this.resetPassword=function(o){e({method:"POST",url:"/api/passwordresetemail",data:{username:o},headers:{"Content-Type":"application/json"}}).success(function(e,o,s,t){console.log("reset post successful"),alert("An email has been sent to your account, go check it out to proceed. You can close this window.")}).error(function(e,o,s,t){console.log("reset post failed: "+e)})},this.deleteAccount=function(s){e({method:"POST",url:"/api/deleteaccount",data:{username:this.username,access_token:window.localStorage.getItem("token")},headers:{"Content-Type":"application/json"}}).success(function(e,t,n,a){console.log(e),o.signOut(),s()}).error(function(e,o,s,t){console.log(e)})}}]);
//# sourceMappingURL=data:application/json;base64,